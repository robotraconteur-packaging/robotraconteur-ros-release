//This file is automatically generated. DO NOT EDIT!
package com.robotraconteur.testing.TestService3;
import java.util.*;
import com.robotraconteur.*;
public interface async_testroot3
{
    void async_get_readme(Action2<Integer,RuntimeException> rr_handler, int rr_timeout);
    void async_set_writeme(int value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_unknown_modifier(Action2<Integer,RuntimeException> rr_handler, int rr_timeout);
    void async_set_unknown_modifier(int value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_testenum1_prop(Action2<testenum1,RuntimeException> rr_handler, int rr_timeout);
    void async_set_testenum1_prop(testenum1 value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_testpod1_prop(Action2<testpod1,RuntimeException> rr_handler, int rr_timeout);
    void async_set_testpod1_prop(testpod1 value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_teststruct3_prop(Action2<teststruct3,RuntimeException> rr_handler, int rr_timeout);
    void async_set_teststruct3_prop(teststruct3 value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_d1(Action2<List<double[]>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_d1(List<double[]> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_d2(Action2<List<double[]>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_d2(List<double[]> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_d3(Action2<Map<Integer,double[]>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_d3(Map<Integer,double[]> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_d4(Action2<Map<Integer,double[]>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_d4(Map<Integer,double[]> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_d5(Action2<List<MultiDimArray>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_d5(List<MultiDimArray> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_d6(Action2<Map<Integer,MultiDimArray>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_d6(Map<Integer,MultiDimArray> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_testnamedarray1(Action2<vector3,RuntimeException> rr_handler, int rr_timeout);
    void async_set_testnamedarray1(vector3 value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_testnamedarray2(Action2<transform,RuntimeException> rr_handler, int rr_timeout);
    void async_set_testnamedarray2(transform value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_testnamedarray3(Action2<transform[],RuntimeException> rr_handler, int rr_timeout);
    void async_set_testnamedarray3(transform[] value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_testnamedarray4(Action2<NamedMultiDimArray,RuntimeException> rr_handler, int rr_timeout);
    void async_set_testnamedarray4(NamedMultiDimArray value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_testnamedarray5(Action2<NamedMultiDimArray,RuntimeException> rr_handler, int rr_timeout);
    void async_set_testnamedarray5(NamedMultiDimArray value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_c1(Action2<CDouble,RuntimeException> rr_handler, int rr_timeout);
    void async_set_c1(CDouble value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_c2(Action2<CDouble[],RuntimeException> rr_handler, int rr_timeout);
    void async_set_c2(CDouble[] value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_c3(Action2<MultiDimArray,RuntimeException> rr_handler, int rr_timeout);
    void async_set_c3(MultiDimArray value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_c4(Action2<List<CDouble[]>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_c4(List<CDouble[]> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_c5(Action2<List<CDouble[]>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_c5(List<CDouble[]> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_c6(Action2<List<MultiDimArray>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_c6(List<MultiDimArray> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_c7(Action2<CSingle,RuntimeException> rr_handler, int rr_timeout);
    void async_set_c7(CSingle value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_c8(Action2<CSingle[],RuntimeException> rr_handler, int rr_timeout);
    void async_set_c8(CSingle[] value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_c9(Action2<MultiDimArray,RuntimeException> rr_handler, int rr_timeout);
    void async_set_c9(MultiDimArray value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_c10(Action2<List<CSingle[]>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_c10(List<CSingle[]> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_c11(Action2<List<CSingle[]>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_c11(List<CSingle[]> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_c12(Action2<List<MultiDimArray>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_c12(List<MultiDimArray> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_b1(Action2<Boolean,RuntimeException> rr_handler, int rr_timeout);
    void async_set_b1(boolean value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_b2(Action2<boolean[],RuntimeException> rr_handler, int rr_timeout);
    void async_set_b2(boolean[] value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_b3(Action2<MultiDimArray,RuntimeException> rr_handler, int rr_timeout);
    void async_set_b3(MultiDimArray value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_b4(Action2<List<boolean[]>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_b4(List<boolean[]> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_b5(Action2<List<boolean[]>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_b5(List<boolean[]> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_get_b6(Action2<List<MultiDimArray>,RuntimeException> rr_handler, int rr_timeout);
    void async_set_b6(List<MultiDimArray> value, Action1<RuntimeException> rr_handler, int rr_timeout);
    void async_testpod1_func1(testpod1 s,Action1<RuntimeException> rr_handler,int rr_timeout);
    void async_testpod1_func2(Action2<testpod1,RuntimeException> rr_handler,int rr_timeout);
    void async_gen_func1(Action2<Generator2<double[]>, RuntimeException> rr_handler,int rr_timeout);
    void async_gen_func2(String name,Action2<Generator2<UnsignedBytes>, RuntimeException> rr_handler,int rr_timeout);
    void async_gen_func3(String name,Action2<Generator3<UnsignedBytes>, RuntimeException> rr_handler,int rr_timeout);
    void async_gen_func4(Action2<Generator1<UnsignedBytes,UnsignedBytes>, RuntimeException> rr_handler,int rr_timeout);
    void async_gen_func5(Action2<Generator1<com.robotraconteur.testing.TestService1.teststruct2,com.robotraconteur.testing.TestService1.teststruct2>, RuntimeException> rr_handler,int rr_timeout);
    void async_test_exception_params1(Action1<RuntimeException> rr_handler,int rr_timeout);
    void async_test_exception_params2(Action1<RuntimeException> rr_handler,int rr_timeout);
    void async_enum_generator1(Action2<Generator2<testenum1[]>, RuntimeException> rr_handler,int rr_timeout);
    void async_enum_generator2(int a, int b,Action2<Generator1<testenum1[],testenum1[]>, RuntimeException> rr_handler,int rr_timeout);
    void async_get_o4(Action2<obj4,RuntimeException> handler, int timeout);
    void async_get_nolock_test(Action2<obj5,RuntimeException> handler, int timeout);
}

