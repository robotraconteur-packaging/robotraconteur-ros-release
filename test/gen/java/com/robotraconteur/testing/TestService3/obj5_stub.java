//This file is automatically generated. DO NOT EDIT!
package com.robotraconteur.testing.TestService3;
import java.util.*;
import com.robotraconteur.*;
public class obj5_stub extends ServiceStub implements obj5, async_obj5 {
    private Pipe<int[]> rr_q1;
    private Pipe<int[]> rr_q2;
    private Wire<int[]> rr_w1;
    private Wire<int[]> rr_w2;
    private ArrayMemory<int[]> rr_m1;
    private ArrayMemory<int[]> rr_m2;
    private ArrayMemory<int[]> rr_m3;
    public obj5_stub(WrappedServiceStub innerstub) {
        super(innerstub); 
    rr_q1=new Pipe<int[]>(innerstub.getPipe("q1"));
    rr_q2=new Pipe<int[]>(innerstub.getPipe("q2"));
    rr_w1=new Wire<int[]>(innerstub.getWire("w1"));
    rr_w2=new Wire<int[]>(innerstub.getWire("w2"));
    rr_m1=new ArrayMemoryClient<int[]>(innerstub.getArrayMemory("m1"));
    rr_m2=new ArrayMemoryClient<int[]>(innerstub.getArrayMemory("m2"));
    rr_m3=new ArrayMemoryClient<int[]>(innerstub.getArrayMemory("m3"));
    }
    public double get_p1() {
    return (MessageElementUtil.<double[]>castDataAndDispose(rr_innerstub.propertyGet("p1")))[0];
    }
    public void set_p1(double value) {
    MessageElement m=null;
    try {
    m=MessageElementUtil.<double[]>packArray("value",new double[] {value});
    rr_innerstub.propertySet("p1", m);
    }
    finally {
    if (m!=null) m.delete();
    }
    }
    public double get_p2() {
    return (MessageElementUtil.<double[]>castDataAndDispose(rr_innerstub.propertyGet("p2")))[0];
    }
    public void set_p2(double value) {
    MessageElement m=null;
    try {
    m=MessageElementUtil.<double[]>packArray("value",new double[] {value});
    rr_innerstub.propertySet("p2", m);
    }
    finally {
    if (m!=null) m.delete();
    }
    }
    public double get_p3() {
    return (MessageElementUtil.<double[]>castDataAndDispose(rr_innerstub.propertyGet("p3")))[0];
    }
    public void set_p3(double value) {
    MessageElement m=null;
    try {
    m=MessageElementUtil.<double[]>packArray("value",new double[] {value});
    rr_innerstub.propertySet("p3", m);
    }
    finally {
    if (m!=null) m.delete();
    }
    }
    public int f1() {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    MessageElement rr_me=null;
    try {
    rr_me=rr_innerstub.functionCall("f1",rr_param);
    return (MessageElementUtil.<int[]>castDataAndDispose(rr_me))[0];
    }
    finally {
    rr_param.delete();
    if (rr_me!=null) rr_me.delete();
    }
    }
    public int f2() {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    MessageElement rr_me=null;
    try {
    rr_me=rr_innerstub.functionCall("f2",rr_param);
    return (MessageElementUtil.<int[]>castDataAndDispose(rr_me))[0];
    }
    finally {
    rr_param.delete();
    if (rr_me!=null) rr_me.delete();
    }
    }
    public void dispatchEvent(String rr_membername, vectorptr_messageelement rr_m) {
    }
    public Pipe<int[]> get_q1()
    { return rr_q1;  }
    public void set_q1(Pipe<int[]> value)
    { throw new RuntimeException();}
    public Pipe<int[]> get_q2()
    { return rr_q2;  }
    public void set_q2(Pipe<int[]> value)
    { throw new RuntimeException();}
    public Wire<int[]> get_w1()
    { return rr_w1;  }
    public void set_w1(Wire<int[]> value)
    { throw new RuntimeException();}
    public Wire<int[]> get_w2()
    { return rr_w2;  }
    public void set_w2(Wire<int[]> value)
    { throw new RuntimeException();}
    public MessageElement callbackCall(String rr_membername, vectorptr_messageelement rr_m) {
    throw new MemberNotFoundException("Member not found");
    }
    public ArrayMemory<int[]> get_m1()
    { return rr_m1; }
    public ArrayMemory<int[]> get_m2()
    { return rr_m2; }
    public ArrayMemory<int[]> get_m3()
    { return rr_m3; }
    public void async_get_p1(Action2<Double,RuntimeException> rr_handler, int rr_timeout)
    {
    rr_async_PropertyGet("p1",new rrend_async_get_p1(),rr_handler,rr_timeout);
    }
    protected class rrend_async_get_p1 implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement value ,RuntimeException err,Object param)
    {
    Action2<Double,RuntimeException> rr_handler=(Action2<Double,RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(0.0,err);
    return;
    }
    Double rr_ret;
    try {
    rr_ret=(MessageElementUtil.<double[]>castDataAndDispose(value))[0];
    } catch (RuntimeException err2) {
    rr_handler.action(0.0,err2);
    return;
    }
    rr_handler.action(rr_ret,null);
    }
    }
    public void async_set_p1(double value, Action1<RuntimeException> rr_handler, int rr_timeout)
    {
    MessageElement m=null;
    try {
    m=MessageElementUtil.<double[]>packArray("value",new double[] {value});
    rr_async_PropertySet("p1",m,new rrend_async_set_p1(),rr_handler,rr_timeout);
    }
    finally {
    if (m!=null) m.delete();
    }
    }
    protected class rrend_async_set_p1 implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement m ,RuntimeException err,Object param)
    {
    Action1<RuntimeException> rr_handler=(Action1<RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(err);
    return;
    }
    rr_handler.action(null);
    }
    }
    public void async_get_p2(Action2<Double,RuntimeException> rr_handler, int rr_timeout)
    {
    rr_async_PropertyGet("p2",new rrend_async_get_p2(),rr_handler,rr_timeout);
    }
    protected class rrend_async_get_p2 implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement value ,RuntimeException err,Object param)
    {
    Action2<Double,RuntimeException> rr_handler=(Action2<Double,RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(0.0,err);
    return;
    }
    Double rr_ret;
    try {
    rr_ret=(MessageElementUtil.<double[]>castDataAndDispose(value))[0];
    } catch (RuntimeException err2) {
    rr_handler.action(0.0,err2);
    return;
    }
    rr_handler.action(rr_ret,null);
    }
    }
    public void async_set_p2(double value, Action1<RuntimeException> rr_handler, int rr_timeout)
    {
    MessageElement m=null;
    try {
    m=MessageElementUtil.<double[]>packArray("value",new double[] {value});
    rr_async_PropertySet("p2",m,new rrend_async_set_p2(),rr_handler,rr_timeout);
    }
    finally {
    if (m!=null) m.delete();
    }
    }
    protected class rrend_async_set_p2 implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement m ,RuntimeException err,Object param)
    {
    Action1<RuntimeException> rr_handler=(Action1<RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(err);
    return;
    }
    rr_handler.action(null);
    }
    }
    public void async_get_p3(Action2<Double,RuntimeException> rr_handler, int rr_timeout)
    {
    rr_async_PropertyGet("p3",new rrend_async_get_p3(),rr_handler,rr_timeout);
    }
    protected class rrend_async_get_p3 implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement value ,RuntimeException err,Object param)
    {
    Action2<Double,RuntimeException> rr_handler=(Action2<Double,RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(0.0,err);
    return;
    }
    Double rr_ret;
    try {
    rr_ret=(MessageElementUtil.<double[]>castDataAndDispose(value))[0];
    } catch (RuntimeException err2) {
    rr_handler.action(0.0,err2);
    return;
    }
    rr_handler.action(rr_ret,null);
    }
    }
    public void async_set_p3(double value, Action1<RuntimeException> rr_handler, int rr_timeout)
    {
    MessageElement m=null;
    try {
    m=MessageElementUtil.<double[]>packArray("value",new double[] {value});
    rr_async_PropertySet("p3",m,new rrend_async_set_p3(),rr_handler,rr_timeout);
    }
    finally {
    if (m!=null) m.delete();
    }
    }
    protected class rrend_async_set_p3 implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement m ,RuntimeException err,Object param)
    {
    Action1<RuntimeException> rr_handler=(Action1<RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action(err);
    return;
    }
    rr_handler.action(null);
    }
    }
    public void async_f1(Action2<Integer,RuntimeException> rr_handler,int rr_timeout)
    {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    try {
    rr_async_FunctionCall("f1",rr_param,new rrend_async_f1(),rr_handler,rr_timeout);
    }
    finally {
    rr_param.delete();
    }
    }
    protected class rrend_async_f1 implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement ret ,RuntimeException err,Object param)
    {
    Action2<Integer,RuntimeException> rr_handler=(Action2<Integer,RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action((int)0,err);
    return;
    }
    Integer rr_ret;
    try {
    rr_ret=(MessageElementUtil.<int[]>castDataAndDispose(ret))[0];
    } catch (RuntimeException err2) {
    rr_handler.action((int)0,err2);
    return;
    }
    rr_handler.action(rr_ret, null);
    }
    }
    public void async_f2(Action2<Integer,RuntimeException> rr_handler,int rr_timeout)
    {
    vectorptr_messageelement rr_param=new vectorptr_messageelement();
    try {
    rr_async_FunctionCall("f2",rr_param,new rrend_async_f2(),rr_handler,rr_timeout);
    }
    finally {
    rr_param.delete();
    }
    }
    protected class rrend_async_f2 implements Action3<MessageElement,RuntimeException,Object> {
    public void action(MessageElement ret ,RuntimeException err,Object param)
    {
    Action2<Integer,RuntimeException> rr_handler=(Action2<Integer,RuntimeException>)param;
    if (err!=null)
    {
    rr_handler.action((int)0,err);
    return;
    }
    Integer rr_ret;
    try {
    rr_ret=(MessageElementUtil.<int[]>castDataAndDispose(ret))[0];
    } catch (RuntimeException err2) {
    rr_handler.action((int)0,err2);
    return;
    }
    rr_handler.action(rr_ret, null);
    }
    }
}
